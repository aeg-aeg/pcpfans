Summary: System-level performance monitoring and performance management
Name: @package_name@
Version: @package_version@
Release: @package_release@@package_sgirelease@
License: GPLv2
Vendor: SGI
URL: http://oss.sgi.com/projects/pcp
Group: Applications/System
Source: @package_name@-@package_version@.src.tar.gz
BuildRoot: @build_root@ 
Distribution: @package_distribution@
BuildRequires: procps bison flex
BuildRequires: python-devel
BuildRequires: ncurses-devel
BuildRequires: readline-devel
BuildRequires: perl(ExtUtils::MakeMaker)

%if "%{_vendor}" == "redhat"
BuildRequires: initscripts man /bin/hostname
%endif
%if 0%{?fedora} >= 18 || 0%{?rhel} >= 7
BuildRequires: systemd-devel
%endif

Conflicts: pcp-pro < 2.2

# Utilities used indirectly e.g. by scripts we install
Requires: bash gawk sed grep fileutils findutils initscripts perl
Requires: python python-ctypes
%if "%{_vendor}" == "suse"
Requires: sysconfig
%define _rcdir /etc/init.d
%else
Requires: initscripts
%define _rcdir /etc/rc.d/init.d
%endif
%define _tmpdir %{_localstatedir}/lib/pcp/tmp

Requires: pcp-libs = @package_version@
Requires: python-pcp = @package_version@
Requires: perl-PCP-PMDA = @package_version@

%description
Performance Co-Pilot (PCP) provides a framework and services to support
system-level performance monitoring and performance management. 

The PCP open source release provides a unifying abstraction for all of
the interesting performance data in a system, and allows client
applications to easily retrieve and process any subset of that data. 

#
# pcp-libs
#
%package libs
License: LGPLv2+
Group: Development/Libraries
Summary: Performance Co-Pilot run-time libraries
Vendor: SGI
URL: http://oss.sgi.com/projects/pcp/

Obsoletes: pcp < 3.0

%description libs
Performance Co-Pilot (PCP) run-time libraries

#
# pcp-libs-devel
#
%package libs-devel
License: GPLv2
Group: Development/Libraries
Summary: Performance Co-Pilot (PCP) development headers and documentation
URL: http://oss.sgi.com/projects/pcp/

Requires: pcp-libs = @package_version@

%description libs-devel
Performance Co-Pilot (PCP) headers, documentation and tools for development.

#
# pcp-testsuite
#
%package testsuite
License: GPLv2
Group: Development/Libraries
Summary: Performance Co-Pilot (PCP) test suite
URL: http://oss.sgi.com/projects/pcp/

Requires: pcp-libs-devel = @package_version@
# Requires: valgrind	# arch-specific

%description testsuite
Quality assurance test suite for Performance Co-Pilot (PCP).

#
# perl-PCP-PMDA. This is the PCP agent perl binding.
#
%package -n perl-PCP-PMDA
License: GPLv2
Group: Development/Languages
Summary: Performance Co-Pilot (PCP) Perl bindings and documentation
URL: http://oss.sgi.com/projects/pcp/
Requires: pcp-libs = @package_version@

%description -n perl-PCP-PMDA
The PCP::PMDA Perl module contains the language bindings for
building Performance Metric Domain Agents (PMDAs) using Perl.
Each PMDA exports performance data for one specific domain, for
example the operating system kernel, Cisco routers, a database,
an application, etc.

#
# perl-PCP-MMV
#
%package -n perl-PCP-MMV
License: GPLv2
Group: Development/Libraries
Summary: Performance Co-Pilot (PCP) Perl bindings for PCP Memory Mapped Values
URL: http://oss.sgi.com/projects/pcp/
Requires: pcp >= @package_version@

%description -n perl-PCP-MMV
The PCP::MMV module contains the Perl language bindings for
building scripts instrumented with the Performance Co-Pilot
(PCP) Memory Mapped Value (MMV) mechanism.
This mechanism allows arbitrary values to be exported from an
instrumented script into the PCP infrastructure for monitoring
and analysis with pmchart, pmie, pmlogger and other PCP tools.

#
# perl-PCP-LogImport
#
%package -n perl-PCP-LogImport
License: GPLv2
Group: Development/Libraries
Summary: Performance Co-Pilot (PCP) Perl bindings for importing external data into PCP archives
URL: http://oss.sgi.com/projects/pcp/
Requires: pcp >= @package_version@

%description -n perl-PCP-LogImport
The PCP::LogImport module contains the Perl language bindings for
importing data in various 3rd party formats into PCP archives so
they can be replayed with standard PCP monitoring tools.

#
# perl-PCP-LogSummary
#
%package -n perl-PCP-LogSummary
License: GPLv2
Group: Development/Languages
Summary: Performance Co-Pilot (PCP) Perl bindings for post-processing output of pmlogsummary
URL: http://oss.sgi.com/projects/pcp/
Requires: pcp >= @package_version@

%description -n perl-PCP-LogSummary
The PCP::LogSummary module provides a Perl module for using the
statistical summary data produced by the Performance Co-Pilot
pmlogsummary utility.  This utility produces various averages,
minima, maxima, and other calculations based on the performance
data stored in a PCP archive.  The Perl interface is ideal for
exporting this data into third-party tools (e.g. spreadsheets).

#
# pcp-import-sar2pcp
#
%package import-sar2pcp
License: LGPLv2+
Group: Applications/System
Summary: Performance Co-Pilot tools for importing sar data into PCP archive logs
URL: http://oss.sgi.com/projects/pcp/
Requires: pcp-libs >= @package_version@ perl-PCP-LogImport >= @package_version@ sysstat

%description import-sar2pcp
Performance Co-Pilot (PCP) front-end tools for importing sar data
into standard PCP archive logs for replay with any PCP monitoring tool.

#
# pcp-import-iostat2pcp
#
%package import-iostat2pcp
License: LGPLv2+
Group: Applications/System
Summary: Performance Co-Pilot tools for importing iostat data into PCP archive logs
URL: http://oss.sgi.com/projects/pcp/
Requires: pcp-libs >= @package_version@ perl-PCP-LogImport >= @package_version@ sysstat

%description import-iostat2pcp
Performance Co-Pilot (PCP) front-end tools for importing iostat data
into standard PCP archive logs for replay with any PCP monitoring tool.

#
# pcp-import-sheet2pcp
#
%package import-sheet2pcp
License: LGPLv2+
Group: Applications/System
Summary: Performance Co-Pilot tools for importing spreadsheet data into PCP archive logs
URL: http://oss.sgi.com/projects/pcp/
Requires: pcp-libs >= @package_version@ perl-PCP-LogImport >= @package_version@ sysstat

%description import-sheet2pcp
Performance Co-Pilot (PCP) front-end tools for importing spreadsheet data
into standard PCP archive logs for replay with any PCP monitoring tool.

#
# pcp-import-mrtg2pcp
#
%package import-mrtg2pcp
License: LGPLv2+
Group: Applications/System
Summary: Performance Co-Pilot tools for importing MTRG data into PCP archive logs
URL: http://oss.sgi.com/projects/pcp/
Requires: pcp-libs >= @package_version@ perl-PCP-LogImport >= @package_version@

%description import-mrtg2pcp
Performance Co-Pilot (PCP) front-end tools for importing MTRG data
into standard PCP archive logs for replay with any PCP monitoring tool.

#
# python-pcp. This is the PCP library bindings for python.
#
%package -n python-pcp
License: GPLv2
Group: Development/Libraries
Summary: Performance Co-Pilot (PCP) Python bindings and documentation
URL: http://oss.sgi.com/projects/pcp/
Requires: pcp-libs = @package_version@

%description -n python-pcp
The python PCP module contains the language bindings for
building Performance Metric API (PMAPI) tools using Python.

%prep
%setup -q

%clean
[ ! -z "$DIST_ROOT" ] && rm -rf $DIST_ROOT
rm -Rf $RPM_BUILD_ROOT

%build
%configure @package_configure@ --with-rcdir=%{_rcdir} --with-tmpdir=%{_tmpdir}
@make@ default_pcp

%install
rm -Rf $RPM_BUILD_ROOT
BACKDIR=`pwd`;
DIST_ROOT=$RPM_BUILD_ROOT
DIST_MANIFEST=`pwd`/install.manifest
export DIST_ROOT DIST_MANIFEST
rm -f $DIST_MANIFEST
@make@ install_pcp

PCP_CONF=$BACKDIR/src/include/pcp.conf
export PCP_CONF
. $BACKDIR/src/include/pcp.env
LIBFILELIST=`ls -1 $BACKDIR/debian/*.{install,dirs} | fgrep -v -- -dev. | fgrep -v -- testsuite | fgrep -v -- -import`
DEVFILELIST=`ls -1 $BACKDIR/debian/*-dev.{install,dirs}`

#
# Package split: pcp, pcp-libs, pcp-libs-devel, pcp-testsuite, pcp-import-*
# -libs gets first pick, then libs-devel, then pcp-testsuite, then pcp-import-*
# The base package catches-all remaining.
#
sed -e 's/^/\//' $LIBFILELIST >libs_files
sed -e 's/^/\//' $DEVFILELIST >devel_files
%ifarch ia64 x86_64 ppc64
sed -i -e 's/usr\/lib\//usr\/lib64\//' libs_files
sed -i -e 's/usr\/lib\//usr\/lib64\//' devel_files
%endif

#
# some special cases for devel
awk '{print $NF}' $DIST_MANIFEST |\
egrep 'pcp\/(examples|demos)|pmdas\/(sample|simple|trivial|txmon)' >>devel_files

#
# Patterns for files to be marked %config(noreplace).
# Note: /etc/pcp.conf is %config, but not noreplace
# and is treated specially below.
cat >conf_files <<EOFEOF
etc/pcp.sh
etc/pcp.env
pmcd/pmcd.conf
pmcd/pmcd.options
pmcd/rc.local
pmie/config.default
pmie/control
pmie/crontab
pmie/stomp
pmlogger/config.default
pmlogger/control
pmlogger/crontab
pmproxy/pmproxy.options
bash_completion.d/pcp
EOFEOF

#
# Files for the pcp-import subpackages. We use these sub-packages
# to isolate the (somewhat exotic) dependencies for these tools
# Likewise, for the pcp-testsuite subpackage.
awk '{print $NF}' $DIST_MANIFEST | egrep 'testsuite' >testsuite_files
awk '{print $NF}' $DIST_MANIFEST | egrep 'sar2pcp' >import_sar2pcp_files
awk '{print $NF}' $DIST_MANIFEST | egrep 'iostat2pcp' >import_iostat2pcp_files
awk '{print $NF}' $DIST_MANIFEST | egrep 'sheet2pcp' >import_sheet2pcp_files
awk '{print $NF}' $DIST_MANIFEST | egrep 'mrtg2pcp' >import_mrtg2pcp_files

rm -f devel_files.rpm libs_files.rpm base_files.rpm testsuite_files.rpm import_*_files.rpm
sort -u $DIST_MANIFEST | $PCP_AWK_PROG ' 
BEGIN {
    while( getline < "libs_files") lib[$0]=1;
    while( getline < "devel_files") dev[$0]=1;
    while( getline < "testsuite_files") testsuite[$0]=1;
    while( getline < "import_sar2pcp_files") import_sar2pcp[$0]=1;
    while( getline < "import_iostat2pcp_files") import_iostat2pcp[$0]=1;
    while( getline < "import_sheet2pcp_files") import_sheet2pcp[$0]=1;
    while( getline < "import_mrtg2pcp_files") import_mrtg2pcp[$0]=1;
    while( getline < "conf_files") conf[nconf++]=$0;
}
{
    if (lib[$NF]) f="libs_files.rpm";
    else if (dev[$NF]) f="devel_files.rpm";
    else if (testsuite[$NF]) f="testsuite_files.rpm";
    else if (import_sar2pcp[$NF]) f="import_sar2pcp_files.rpm";
    else if (import_iostat2pcp[$NF]) f="import_iostat2pcp_files.rpm";
    else if (import_sheet2pcp[$NF]) f="import_sheet2pcp_files.rpm";
    else if (import_mrtg2pcp[$NF]) f="import_mrtg2pcp_files.rpm";
    else f="base_files.rpm"
}
$1 == "d" { printf ("%%%%dir %%%%attr(%s,root,root) %s\n", $2, $5) >> f } 

$1 == "f" && $6 ~ "etc/pcp.conf" { printf ("%%%%config ") >> f; }
$1 == "f" {
	    for (i=0; i < nconf; i++) {
	    	if ($6 ~ conf[i]) {
		    printf ("%%%%config(noreplace) ") >> f;
		    break;
		}
	    }
	    if (match ($6, "'$PCP_MAN_DIR'") || match ($6, "'$PCP_DOC_DIR'")) {
		printf ("%%%%doc ") >> f;
	    }
	    printf ("%%%%attr(%s,root,root) %s\n", $2, $6) >> f }
$1 == "l" { print "%attr(0777,root,root)", $3 >> f }'

%pre testsuite
getent group pcpqa >/dev/null || groupadd -r pcpqa
getent passwd pcpqa >/dev/null || \
  useradd -c "PCP Quality Assurance" -g pcpqa -m -r -s /bin/bash pcpqa 2>/dev/null
exit 0

%post testsuite
chown -R pcpqa:pcpqa /var/lib/pcp/testsuite 2>/dev/null

%pre
getent group pcp >/dev/null || groupadd -r pcp
getent passwd pcp >/dev/null || \
    useradd -c "Performance Co-Pilot" -g pcp -d /var/lib/pcp -M -r -s /sbin/nologin pcp
# new directories; they should match /etc/pcp.conf settings after install
PCP_SYSCONF_DIR=@pcp_sysconf_dir@
PCP_LOG_DIR=@pcp_log_dir@
# produce a script to run post-install to move configs to their new homes
save_configs_script()
{
    _new="$1"
    shift
    for _dir
    do
        [ "$_dir" = "$_new" ] && continue
        if [ -d "$_dir" ]
        then
            ( cd "$_dir" ; find . -type f -print ) | sed -e 's/^\.\///' \
            | while read _file
            do
                _want=true
                if [ -f "$_new/$_file" ]
                then
                    # file exists in both directories, pick the more
                    # recently modified one
                    _try=`find "$_dir/$_file" -newer "$_new/$_file" -print`
                    [ -n "$_try" ] || _want=false
                fi
                $_want && echo cp -p "$_dir/$_file" "$_new/$_file"
            done
        fi
    done
}
# migrate and clean configs if we have had a previous in-use installation
[ -d "$PCP_LOG_DIR" ] || exit 0	# no configuration file upgrades required
rm -f "$PCP_LOG_DIR/configs.sh"
for daemon in pmcd pmie pmlogger pmproxy
do
    save_configs_script >> "$PCP_LOG_DIR/configs.sh" "$PCP_SYSCONF_DIR/$daemon" \
        /var/lib/pcp/config/$daemon /etc/$daemon /etc/pcp/$daemon /etc/sysconfig/$daemon
done
exit 0

%preun
if [ "$1" -eq 0 ]
then
    # stop daemons before erasing the package
    /sbin/service pmlogger stop >/dev/null 2>&1
    /sbin/service pmie stop >/dev/null 2>&1
    /sbin/service pmproxy stop >/dev/null 2>&1
    /sbin/service pmcd stop >/dev/null 2>&1
    /sbin/chkconfig --del pcp >/dev/null 2>&1
    /sbin/chkconfig --del pmcd >/dev/null 2>&1
    /sbin/chkconfig --del pmlogger >/dev/null 2>&1
    /sbin/chkconfig --del pmie >/dev/null 2>&1
    /sbin/chkconfig --del pmproxy >/dev/null 2>&1
fi

%post
PCP_LOG_DIR=@pcp_log_dir@
# restore saved configs, if any
test -s "$PCP_LOG_DIR/configs.sh" && source "$PCP_LOG_DIR/configs.sh"
rm -f $PCP_LOG_DIR/configs.sh

# migrate old to new temp dir locations within the same filesystem)
migrate_tempdirs()
{
    _sub="$1"
    _new_tmp_dir=%{_tmpdir}
    _old_tmp_dir=%{_localstatedir}/tmp

    for d in "$_old_tmp_dir/$_sub" ; do
	test -d "$d" -a -k "$d" || continue
	cd "$d" || continue
	for f in * ; do
	    [ "$f" != "*" ] || continue
	    source="$d/$f"
	    target="$_new_tmp_dir/$_sub/$f"
            [ "$source" != "$target" ] || continue
	    [ -f "$target" ] || mv -fu "$source" "$target"
        done
        cd && rmdir "$d" 2>/dev/null
    done
}
for daemon in mmv pmdabash pmie pmlogger
do
    migrate_tempdirs $daemon
done
chown -R pcp:pcp "$PCP_LOG_DIR/pmcd" 2>/dev/null
chown -R pcp:pcp "$PCP_LOG_DIR/pmlogger" 2>/dev/null
chown -R pcp:pcp "$PCP_LOG_DIR/pmie" 2>/dev/null
chown -R pcp:pcp "$PCP_LOG_DIR/pmproxy" 2>/dev/null
/sbin/chkconfig --add pmcd >/dev/null 2>&1
/sbin/service pmcd condrestart
/sbin/chkconfig --add pmlogger >/dev/null 2>&1
/sbin/service pmlogger condrestart
/sbin/chkconfig --add pmie >/dev/null 2>&1
/sbin/service pmie condrestart
/sbin/chkconfig --add pmproxy >/dev/null 2>&1
/sbin/service pmproxy condrestart

%post libs -p /sbin/ldconfig
%postun libs -p /sbin/ldconfig

%files -f base_files.rpm
%defattr(-,root,root)

%files libs -f libs_files.rpm
%defattr(-,root,root)

%files libs-devel -f devel_files.rpm
%defattr(-,root,root)

%files testsuite -f testsuite_files.rpm
%defattr(-,pcpqa,pcpqa)

%files import-sar2pcp -f import_sar2pcp_files.rpm
%defattr(-,root,root)

%files import-iostat2pcp -f import_iostat2pcp_files.rpm
%defattr(-,root,root)

%files import-sheet2pcp -f import_sheet2pcp_files.rpm
%defattr(-,root,root)

%files import-mrtg2pcp -f import_mrtg2pcp_files.rpm
%defattr(-,root,root)

%files -n perl-PCP-PMDA -f perl-pcp-pmda.list
%defattr(-,root,root)

%files -n perl-PCP-MMV -f perl-pcp-mmv.list
%defattr(-,root,root)

%files -n perl-PCP-LogImport -f perl-pcp-logimport.list
%defattr(-,root,root)

%files -n perl-PCP-LogSummary -f perl-pcp-logsummary.list
%defattr(-,root,root)

%files -n python-pcp -f python-pcp.list.rpm
%defattr(-,root,root)

%changelog
* Fri Nov 16 2012 Nathan Scott <nathans@redhat.com> - 3.6.10-1
- Currently under development.

* Fri Oct 12 2012 Nathan Scott <nathans@redhat.com> - 3.6.9-1
- Update to latest PCP sources.

* Tue Aug 28 2012 Mark Goodwin <mgoodwin@redhat.com> - 3.6.6-1
- Update to latest PCP sources, see installed CHANGELOG for details.
- Introduces new python-pcp and pcp-testsuite sub-packages.

* Thu Aug 16 2012 Nathan Scott <nathans@redhat.com> - 3.6.5-1
- Update to latest PCP sources, resolves several security issues.

* Tue Jun 12 2012 Nathan Scott <nathans@aconex.com> - 3.6.4-1
- Update to latest PCP sources, resolves Fedora s390x build issue.

* Fri Apr 27 2012 Nathan Scott <nathans@aconex.com> - 3.6.3-1
- Update to latest PCP sources.

* Wed Mar 28 2012 Nathan Scott <nathans@aconex.com> - 3.6.0-1
- Update to latest PCP sources.

* Thu Dec  1 2011 Nathan Scott <nathans@aconex.com> - 3.5.11-1
- Update to latest PCP sources.

* Sun Oct 23 2011 Mark Goodwin <mgoodwin@redhat.com> - 3.5.9-1
- Update to latest PCP sources.

* Mon Aug  8 2011 Nathan Scott <nathans@aconex.com> - 3.5.8-1
- Update to latest PCP sources.

* Thu Jul 21 2011 Nathan Scott <nathans@aconex.com> - 3.5.6-1
- Update to latest PCP sources.

* Fri Jul  6 2011 Nathan Scott <nathans@aconex.com> - 3.5.5-1
- Update to latest PCP sources.

* Fri Jun  3 2011 Nathan Scott <nathans@aconex.com> - 3.5.2-1
- Update to latest PCP sources.

* Mon Aug 30 2010 Mark Goodwin <mgoodwin@redhat.com>
- bump to 3.4.0-1, split out individual pcp-import-* packages

* Mon Aug  2 2010 Mark Goodwin <mgoodwin@redhat.com>
- bump to 3.4.0, add the perl-PCP-LogImport sub-package

* Thu Feb 25 2010 Martin Hicks <mort@sgi.com>
- Remove SGI cruft from specfile.

* Tue Feb 23 2010 Nathan Scott <nathans@aconex.com> - 3.1.1-1
- Update to latest PCP sources.

* Mon Oct 19 2009 Martin Hicks <mort@sgi.com> - 3.0.1-2
- Remove IB dependencies.  The Infiniband PMDA is being moved to
  a stand-alone package.
- Move cluster PMDA to a stand-alone package.

* Mon Oct 5 2009 Mark Goodwin <mgoodwin@redhat.com> - 3.0.0-7
- merged Kenj's tree with PMDA_INTERFACE_4 and dynamic PMNS
- ReplacePmnsSubtree fix bad signal handling botch

* Mon Sep 28 2009 Mark Goodwin <mgoodwin@redhat.com> - 3.0.0-6
- bump to v3.0.0 and reconcile spec with Fedora spec
