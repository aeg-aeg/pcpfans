Summary: System-level performance monitoring and performance management
Name: @package_name@
Version: @package_version@
Release: @package_release@@package_sgirelease@
License: GPLv2
Vendor: SGI
URL: http://oss.sgi.com/projects/pcp
Group: Applications/System
Source: @package_name@-@package_version@.src.tar.gz
BuildRoot: @build_root@ 
Distribution: @package_distribution@
BuildRequires: procps bison flex
BuildRequires: python-devel
BuildRequires: ncurses-devel
BuildRequires: readline-devel
BuildRequires: perl(ExtUtils::MakeMaker)

%if "%{_vendor}" == "redhat"
BuildRequires: initscripts man /bin/hostname
%endif
%if 0%{?fedora} >= 18 || 0%{?rhel} >= 7
BuildRequires: systemd-devel
%endif

Conflicts: pcp-pro < 2.2

# Utilities used indirectly e.g. by scripts we install
Requires: bash gawk sed grep fileutils findutils initscripts perl
Requires: python python-ctypes
%if "%{_vendor}" == "suse"
Requires: sysconfig
%define _rcdir /etc/init.d
%else
Requires: initscripts
%define _rcdir /etc/rc.d/init.d
%endif
%define _tmpdir %{_localstatedir}/lib/pcp/tmp

Requires: pcp-libs = @package_version@
Requires: python-pcp = @package_version@
Requires: perl-PCP-PMDA = @package_version@

%description
Performance Co-Pilot (PCP) provides a framework and services to support
system-level performance monitoring and performance management. 

The PCP open source release provides a unifying abstraction for all of
the interesting performance data in a system, and allows client
applications to easily retrieve and process any subset of that data. 

#
# pcp-libs
#
%package libs
License: LGPLv2+
Group: Development/Libraries
Summary: Performance Co-Pilot run-time libraries
Vendor: SGI
URL: http://oss.sgi.com/projects/pcp/

Obsoletes: pcp < 3.0

%description libs
Performance Co-Pilot (PCP) run-time libraries

#
# pcp-libs-devel
#
%package libs-devel
License: GPLv2
Group: Development/Libraries
Summary: Performance Co-Pilot (PCP) development headers and documentation
URL: http://oss.sgi.com/projects/pcp/

Requires: pcp-libs = @package_version@

%description libs-devel
Performance Co-Pilot (PCP) headers, documentation and tools for development.

#
# pcp-testsuite
#
%package testsuite
License: GPLv2
Group: Development/Libraries
Summary: Performance Co-Pilot (PCP) test suite
URL: http://oss.sgi.com/projects/pcp/

Requires: pcp-libs-devel = @package_version@
# Requires: valgrind	# arch-specific

%description testsuite
Quality assurance test suite for Performance Co-Pilot (PCP).

#
# perl-PCP-PMDA. This is the PCP agent perl binding.
#
%package -n perl-PCP-PMDA
License: GPLv2
Group: Development/Languages
Summary: Performance Co-Pilot (PCP) Perl bindings and documentation
URL: http://oss.sgi.com/projects/pcp/
Requires: pcp-libs = @package_version@

%description -n perl-PCP-PMDA
The PCP::PMDA Perl module contains the language bindings for
building Performance Metric Domain Agents (PMDAs) using Perl.
Each PMDA exports performance data for one specific domain, for
example the operating system kernel, Cisco routers, a database,
an application, etc.

#
# perl-PCP-MMV
#
%package -n perl-PCP-MMV
License: GPLv2
Group: Development/Libraries
Summary: Performance Co-Pilot (PCP) Perl bindings for PCP Memory Mapped Values
URL: http://oss.sgi.com/projects/pcp/
Requires: pcp >= @package_version@

%description -n perl-PCP-MMV
The PCP::MMV module contains the Perl language bindings for
building scripts instrumented with the Performance Co-Pilot
(PCP) Memory Mapped Value (MMV) mechanism.
This mechanism allows arbitrary values to be exported from an
instrumented script into the PCP infrastructure for monitoring
and analysis with pmchart, pmie, pmlogger and other PCP tools.

#
# perl-PCP-LogImport
#
%package -n perl-PCP-LogImport
License: GPLv2
Group: Development/Libraries
Summary: Performance Co-Pilot (PCP) Perl bindings for importing external data into PCP archives
URL: http://oss.sgi.com/projects/pcp/
Requires: pcp >= @package_version@

%description -n perl-PCP-LogImport
The PCP::LogImport module contains the Perl language bindings for
importing data in various 3rd party formats into PCP archives so
they can be replayed with standard PCP monitoring tools.

#
# perl-PCP-LogSummary
#
%package -n perl-PCP-LogSummary
License: GPLv2
Group: Development/Languages
Summary: Performance Co-Pilot (PCP) Perl bindings for post-processing output of pmlogsummary
URL: http://oss.sgi.com/projects/pcp/
Requires: pcp >= @package_version@

%description -n perl-PCP-LogSummary
The PCP::LogSummary module provides a Perl module for using the
statistical summary data produced by the Performance Co-Pilot
pmlogsummary utility.  This utility produces various averages,
minima, maxima, and other calculations based on the performance
data stored in a PCP archive.  The Perl interface is ideal for
exporting this data into third-party tools (e.g. spreadsheets).

#
# pcp-import-sar2pcp
#
%package import-sar2pcp
License: LGPLv2+
Group: Applications/System
Summary: Performance Co-Pilot tools for importing sar data into PCP archive logs
URL: http://oss.sgi.com/projects/pcp/
Requires: pcp-libs >= @package_version@ perl-PCP-LogImport >= @package_version@ sysstat

%description import-sar2pcp
Performance Co-Pilot (PCP) front-end tools for importing sar data
into standard PCP archive logs for replay with any PCP monitoring tool.

#
# pcp-import-iostat2pcp
#
%package import-iostat2pcp
License: LGPLv2+
Group: Applications/System
Summary: Performance Co-Pilot tools for importing iostat data into PCP archive logs
URL: http://oss.sgi.com/projects/pcp/
Requires: pcp-libs >= @package_version@ perl-PCP-LogImport >= @package_version@ sysstat

%description import-iostat2pcp
Performance Co-Pilot (PCP) front-end tools for importing iostat data
into standard PCP archive logs for replay with any PCP monitoring tool.

#
# pcp-import-sheet2pcp
#
%package import-sheet2pcp
License: LGPLv2+
Group: Applications/System
Summary: Performance Co-Pilot tools for importing spreadsheet data into PCP archive logs
URL: http://oss.sgi.com/projects/pcp/
Requires: pcp-libs >= @package_version@ perl-PCP-LogImport >= @package_version@ sysstat

%description import-sheet2pcp
Performance Co-Pilot (PCP) front-end tools for importing spreadsheet data
into standard PCP archive logs for replay with any PCP monitoring tool.

#
# pcp-import-mrtg2pcp
#
%package import-mrtg2pcp
License: LGPLv2+
Group: Applications/System
Summary: Performance Co-Pilot tools for importing MTRG data into PCP archive logs
URL: http://oss.sgi.com/projects/pcp/
Requires: pcp-libs >= @package_version@ perl-PCP-LogImport >= @package_version@

%description import-mrtg2pcp
Performance Co-Pilot (PCP) front-end tools for importing MTRG data
into standard PCP archive logs for replay with any PCP monitoring tool.

#
# python-pcp. This is the PCP library bindings for python.
#
%package -n python-pcp
License: GPLv2
Group: Development/Libraries
Summary: Performance Co-Pilot (PCP) Python bindings and documentation
URL: http://oss.sgi.com/projects/pcp/
Requires: pcp-libs = @package_version@

%description -n python-pcp
The python PCP module contains the language bindings for
building Performance Metric API (PMAPI) tools using Python.

%prep
%setup -q
%configure @package_configure@ --with-rcdir=%{_rcdir} --with-tmpdir=%{_tmpdir}
touch config.done

%clean
[ ! -z "$DIST_ROOT" ] && rm -rf $DIST_ROOT
rm -Rf $RPM_BUILD_ROOT

%build
@make@ default_pcp

%install
rm -Rf $RPM_BUILD_ROOT
BACKDIR=`pwd`;
DIST_ROOT=$RPM_BUILD_ROOT
DIST_MANIFEST=`pwd`/install.manifest
export DIST_ROOT DIST_MANIFEST
rm -f $DIST_MANIFEST
@make@ install_pcp

PCP_CONF=$BACKDIR/src/include/pcp.conf
export PCP_CONF
. $BACKDIR/src/include/pcp.env
LIBFILELIST=`ls -1 $BACKDIR/debian/*.{install,dirs} | fgrep -v -- -dev. | fgrep -v -- testsuite | fgrep -v -- -import`
DEVFILELIST=`ls -1 $BACKDIR/debian/*-dev.{install,dirs}`

#
# Package split: pcp, pcp-libs, pcp-libs-devel, pcp-testsuite, pcp-import-*
# -libs gets first pick, then libs-devel, then pcp-testsuite, then pcp-import-*
# The base package catches-all remaining.
#
sed -e 's/^/\//' $LIBFILELIST >libs_files
sed -e 's/^/\//' $DEVFILELIST >devel_files
%ifarch ia64 x86_64 ppc64
sed -i -e 's/usr\/lib\//usr\/lib64\//' libs_files
sed -i -e 's/usr\/lib\//usr\/lib64\//' devel_files
%endif

#
# some special cases for devel
awk '{print $NF}' $DIST_MANIFEST |\
egrep 'pcp\/(examples|demos)|pmdas\/(sample|simple|trivial|txmon)' >>devel_files

#
# Patterns for files to be marked %config(noreplace).
# Note: /etc/pcp.conf is %config, but not noreplace
# and is treated specially below.
cat >conf_files <<EOFEOF
etc/pcp.sh
etc/pcp.env
pmcd/pmcd.conf
pmcd/pmcd.options
pmcd/rc.local
pmie/config.default
pmie/control
pmie/crontab
pmie/stomp
pmlogger/config.default
pmlogger/control
pmlogger/crontab
pmproxy/pmproxy.options
bash_completion.d/pcp
EOFEOF

#
# Files for the pcp-import subpackages. We use these sub-packages
# to isolate the (somewhat exotic) dependencies for these tools
# Likewise, for the pcp-testsuite subpackage.
awk '{print $NF}' $DIST_MANIFEST | egrep 'testsuite' >testsuite_files
awk '{print $NF}' $DIST_MANIFEST | egrep 'sar2pcp' >import_sar2pcp_files
awk '{print $NF}' $DIST_MANIFEST | egrep 'iostat2pcp' >import_iostat2pcp_files
awk '{print $NF}' $DIST_MANIFEST | egrep 'sheet2pcp' >import_sheet2pcp_files
awk '{print $NF}' $DIST_MANIFEST | egrep 'mrtg2pcp' >import_mrtg2pcp_files

rm -f devel_files.rpm libs_files.rpm base_files.rpm testsuite_files.rpm import_*_files.rpm
sort -u $DIST_MANIFEST | $PCP_AWK_PROG ' 
BEGIN {
    while( getline < "libs_files") lib[$0]=1;
    while( getline < "devel_files") dev[$0]=1;
    while( getline < "testsuite_files") testsuite[$0]=1;
    while( getline < "import_sar2pcp_files") import_sar2pcp[$0]=1;
    while( getline < "import_iostat2pcp_files") import_iostat2pcp[$0]=1;
    while( getline < "import_sheet2pcp_files") import_sheet2pcp[$0]=1;
    while( getline < "import_mrtg2pcp_files") import_mrtg2pcp[$0]=1;
    while( getline < "conf_files") conf[nconf++]=$0;
}
{
    if (lib[$NF]) f="libs_files.rpm";
    else if (dev[$NF]) f="devel_files.rpm";
    else if (testsuite[$NF]) f="testsuite_files.rpm";
    else if (import_sar2pcp[$NF]) f="import_sar2pcp_files.rpm";
    else if (import_iostat2pcp[$NF]) f="import_iostat2pcp_files.rpm";
    else if (import_sheet2pcp[$NF]) f="import_sheet2pcp_files.rpm";
    else if (import_mrtg2pcp[$NF]) f="import_mrtg2pcp_files.rpm";
    else f="base_files.rpm"
}
$1 == "d" { printf ("%%%%dir %%%%attr(%s,root,root) %s\n", $2, $5) >> f } 

$1 == "f" && $6 ~ "etc/pcp.conf" { printf ("%%%%config ") >> f; }
$1 == "f" {
	    for (i=0; i < nconf; i++) {
	    	if ($6 ~ conf[i]) {
		    printf ("%%%%config(noreplace) ") >> f;
		    break;
		}
	    }
	    if (match ($6, "'$PCP_MAN_DIR'") || match ($6, "'$PCP_DOC_DIR'")) {
		printf ("%%%%doc ") >> f;
	    }
	    printf ("%%%%attr(%s,root,root) %s\n", $2, $6) >> f }
$1 == "l" { print "%attr(0777,root,root)", $3 >> f }'

%pre testsuite
getent group pcpqa >/dev/null || groupadd -r pcpqa
getent passwd pcpqa >/dev/null || \
  useradd -c "PCP Quality Assurance" -g pcpqa -m -r -s /bin/bash pcpqa 2>/dev/null
exit 0

%post testsuite
chown -R pcpqa:pcpqa /var/lib/pcp/testsuite 2>/dev/null

%pre
# The new place ... this should match the setting in /etc/pcp.conf
# _after_ the installation
#
PCP_SYSCONF_DIR=@pcp_sysconf_dir@
# and same here ...
#
PCP_LOG_DIR=@pcp_log_dir@
[ -d "$PCP_LOG_DIR" ] || mkdir "$PCP_LOG_DIR"

