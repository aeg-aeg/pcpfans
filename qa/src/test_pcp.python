#
# Copyright (C) 2012-2013 Red Hat Inc.
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
# 
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# for more details.
#

import sys
import unittest
from pcp import pmapi
import cpmapi as api

# Utilities

def dump_seq(name_p, seq_p):
    print (name_p)
    for text in seq_p:
        if type(text) == type(int()) or type(text) == type(long()):
            print (hex(text))
        else:
            print (text)
    print ()

def dump_array_ptrs(name_p, arr_p):
    print (name_p)
    for i in xrange(len(arr_p)):
        if (i > 0):
            print (" "), arr_p[i].contents
        else:
            print (""), arr_p[i].contents

def dump_array(name_p, arr_p):
    print (name_p)
    for i in xrange(len(arr_p)):
        if (i > 0):
            print (" "), hex(arr_p[i])
        else:
            print (""), hex(arr_p[i])

ARCHIVE = ""                    # For testing either localhost or archive

TRAVERSE_CALLBACK_COUNT = 0     # callback for pmTraversePMNS

def traverse_callback(arg):
    global TRAVERSE_CALLBACK_COUNT
    TRAVERSE_CALLBACK_COUNT += 1

def test_pcp(self):

    if (ARCHIVE == ""):
        print 'Running as localhost'
        ctx = pmapi.pmContext(api.PM_CONTEXT_HOST, "localhost")
        self.local_type = True
    else:
        print 'Running as archive', ARCHIVE
        ctx = pmapi.pmContext(api.PM_CONTEXT_ARCHIVE, ARCHIVE)
        self.archive_type = True

    # pmGetContextHostName
    hostname = ctx.pmGetContextHostName()
    print "pmGetContextHostName:", hostname
    self.assertTrue(len(hostname) >= 0)

    # pmParseMetricSpec
    source = 'localhost'
    (code, rsltp, errmsg) = ctx.pmParseMetricSpec("kernel.all.load", 0, source)
    if (code < 0):
        print "pmParseMetricSpec error: ", errmsg
    else:
        print "pmParseMetricSpec:", rsltp.contents.source
        self.assertTrue(rsltp.contents.source == source)

    # Get number of cpus
    # pmLookupName
    (code, self.ncpu_id) = ctx.pmLookupName(("hinv.ncpu", "kernel.all.load"))
    print "pmLookupName:", self.ncpu_id
    self.assertTrue(code >= 0)

    # pmIDStr
    print "pmIDStr:", ctx.pmIDStr(self.ncpu_id[0])
    self.assertTrue(ctx.pmIDStr(self.ncpu_id[0]).count(".") > 1)

    # pmLookupDesc
    (code, descs) = ctx.pmLookupDesc(self.ncpu_id)
    dump_array_ptrs("pmLookupDesc", descs)
    self.assertTrue(code >= 0)

    # pmFetch
    (code, results) = ctx.pmFetch(self.ncpu_id)
    print "pmFetch:", results
    self.assertTrue(code >= 0)

    # pmExtractValue
    (code, atom) = ctx.pmExtractValue(results.contents.get_valfmt(0),
                                     results.contents.get_vlist(0, 0),
                                     descs[0].contents.type,
                                     api.PM_TYPE_U32)
    self.assertTrue(code >= 0)
    self.assertTrue(atom.ul > 0)
    print "pmExtractValue:", atom.ul

    # pmGetChildren
    gcs = ctx.pmGetChildren("kernel")
    print "pmGetChildren:", gcs
    self.assertTrue(len(gcs) >=2)

    # pmGetChildrenStatus
    gcs = ctx.pmGetChildrenStatus("kernel")
    print "pmGetChildrenStatus:", gcs
    self.assertTrue(len(gcs[0]) == len(gcs[1]))

    # pmGetPMNSLocation
    index = ctx.pmGetPMNSLocation()
    print "pmGetPMNSLocation:", index
    self.assertTrue(index == api.PMNS_ARCHIVE or
                    index == api.PMNS_LOCAL or
                    index == api.PMNS_REMOTE)

    # pmTraversePMNS
    ctx.pmTraversePMNS("kernel", traverse_callback)
    print "pmTraversePMNS:", TRAVERSE_CALLBACK_COUNT
    self.assertTrue(TRAVERSE_CALLBACK_COUNT > 0)

    # pmLookupName
    try:
        (code, badid) = ctx.pmLookupName("A_BAD_METRIC")
        self.assertTrue(False)
    except pmapi.pmErr, error:
        print "pmLookupName:", error
        self.assertTrue(True)
    metrics = ("kernel.all.load", "sample.bin",
               "kernel.percpu.cpu.sys", "mem.freemem")
    (code, self.metric_ids) = ctx.pmLookupName(metrics)
    dump_array("pmLookupName", self.metric_ids)
    self.assertTrue(len(self.metric_ids) == 4)

    for i in xrange(len(metrics)):
        # pmNameAll
        nameall = ctx.pmNameAll(self.metric_ids[i])
        print "pmNameAll:", nameall[0]
        self.assertTrue(nameall[0] == metrics[i])

        # pmNameID
        name = ctx.pmNameID(self.metric_ids[i])
        print "pmNameID:", name
        self.assertTrue(name == metrics[i])

        # pmLookupDesc
        (code, descs) = ctx.pmLookupDesc(self.metric_ids[i])
        dump_array_ptrs("pmLookupDesc", descs)
        self.assertTrue(len(descs) == 1)

    (code, descs) = ctx.pmLookupDesc(self.metric_ids)
    if self.local_type:
        # pmGetInDom - sample.bin
        (inst, name) = ctx.pmGetInDom(descs[1])
        print "pmGetInDom:", name
        self.assertTrue(len(inst) == 9 and len(name) == 9)
    else:
        # pmGetInDomArchive - sample.bin
        (inst, name) = ctx.pmGetInDomArchive(descs[1])
        print "pmGetInDomArchive:", name
        self.assertTrue(len(inst) == 9 and len(name) == 9)

    # pmInDomStr
    indomstr = ctx.pmInDomStr(descs[0])
    print "pmInDomStr:", indomstr
    self.assertTrue(indomstr.count(".") >= 1)

    # pmDelProfile
    code = ctx.pmDelProfile(descs[0], None)
    print "pmDelProfile:"
    self.assertTrue(code >= 0)

    if self.local_type:
        # pmLookupInDom
        inst1 = ctx.pmLookupInDom(descs[0], "1 minute")
        print "pmLookupInDom:", inst1
    else:
        # pmLookupInDomArchive
        inst1 = ctx.pmLookupInDomArchive(descs[0], "1 minute")
        print "pmLookupInDomArchive:", inst1
    self.assertTrue(inst1 >= 0)
        
    if self.local_type:
        # pmNameInDom
        instname = ctx.pmNameInDom(descs[0], inst1)
        print "pmNameInDom:", instname
    else:
        # pmNameInDomArchive
        instname = ctx.pmNameInDomArchive(descs[0], inst1)
        print "pmNameInDomArchive:", instname
    self.assertTrue(instname == "1 minute")
        
    try:
        # pmLookupInDomText
        ctx.pmLookupInDomText(descs[0])
        self.assertTrue(False)
    except pmapi.pmErr, error:
        print "pmLookupInDomText:", error
        self.assertTrue(True)
        
    # pmAddProfile
    code = ctx.pmAddProfile(descs[0], inst1)
    self.assertTrue(code >= 0)

    inst = 0
    try:
        # pmLookupInDom
        inst = ctx.pmLookupInDom(descs[0], "gg minute")
        self.assertTrue(False)
    except pmapi.pmErr, error:
        print "pmLookupInDom:", error
        self.assertTrue(True)
        
    if self.local_type:
        # pmLookupInDom
        inst5 = ctx.pmLookupInDom(descs[0], "5 minute")
        inst15 = ctx.pmLookupInDom(descs[0], "15 minute")
        print "pmLookupInDom:", inst5, inst15
    else:
        # pmLookupInDomArchive
        inst5 = ctx.pmLookupInDomArchive(descs[0], "5 minute")
        inst15 = ctx.pmLookupInDomArchive(descs[0], "15 minute")
        print "pmLookupInDomArchive:", inst5, inst15
    self.assertTrue(inst15 >= 0)
        
    # pmAddProfile
    code = ctx.pmAddProfile(descs[0], inst15)
    print "pmAddProfile:"
    self.assertTrue(code >= 0)

    # pmParseInterval
    (code, delta, errmsg) = ctx.pmParseInterval("3 seconds")
    print "pmParseInterval:", delta
    self.assertTrue(code >= 0)

    try:
        inst = ctx.pmLoadNameSpace("NoSuchFile")
        self.assertTrue(False)
    except pmapi.pmErr, error:
        print "pmLoadNameSpace:", error
        self.assertTrue(True)

    # pmFetch
    (code, results) = ctx.pmFetch(self.metric_ids)
    print "pmFetch:", results
    self.assertTrue(code >= 0)

    # pmSortInstances
    ctx.pmSortInstances(results)
    print "pmSortInstances:", code

    # pmStore
    try:
        code = ctx.pmStore(results)
        self.assertTrue(False)
    except pmapi.pmErr, error:
        print "pmStore: ", error
        self.assertTrue(True)

    for i in xrange(results.contents.numpmid):
        if (results.contents.get_pmid(i) != self.metric_ids[1]):
            continue
        for val in xrange(9):
            # sample.bin - each instance in turn
            (code, atom) = ctx.pmExtractValue(results.contents.get_valfmt(i),
                                             results.contents.get_vlist(i, val),
                                             descs[i].contents.type,
                                             api.PM_TYPE_FLOAT)
            print "pmExtractValue", val, atom.f
            self.assertTrue(99*(val+1) <= atom.f and atom.f <= 101*(val+1))

    # pmExtractValue 
    for i in xrange(results.contents.numpmid):
        if (results.contents.get_pmid(i) != self.metric_ids[3]):
            continue
        # mem.freemem
        (code, tmpatom) = ctx.pmExtractValue(results.contents.get_valfmt(i),
                                            results.contents.get_vlist(i, 0),
                                            descs[i].contents.type,
                                            api.PM_TYPE_FLOAT)
        self.assertTrue(tmpatom.f > 0)

    # pmConvScale
    (code, atom) = ctx.pmConvScale(api.PM_TYPE_FLOAT, tmpatom, descs, 3,
                                  api.PM_SPACE_MBYTE)
    print "pmConvScale", tmpatom.f, atom.f
    self.assertTrue(atom.f > 0)

    # pmAtomStr
    atomstr = ctx.pmAtomStr(atom, api.PM_TYPE_FLOAT)
    print "pmAtomStr", atomstr

    # pmtimevalSleep
    ctx.pmtimevalSleep(delta);
    print "pmtimevalSleep"

    # pmDupContext
    context = ctx.pmDupContext()
    print "pmDupContext", context
    self.assertTrue(context >= 0)

    # pmWhichContext
    code = ctx.pmWhichContext()
    print "pmWhichContext", code
    self.assertTrue(code >= 0)

    # pmTypeStr
    typestr = ctx.pmTypeStr(api.PM_TYPE_FLOAT)
    print "pmTypeStr", typestr
    self.assertTrue(typestr == "FLOAT")

    if self.archive_type:
        # pmSetMode
        code = ctx.pmSetMode(api.PM_MODE_INTERP, results.contents.timestamp, 0)
        print "pmSetMode", code
        self.assertTrue(code >= 0)

        # pmGetArchiveLabel
        (code, loglabel) = ctx.pmGetArchiveLabel()
        print "pmGetArchiveLabel", code
        self.assertTrue (code >= 0 and loglabel.pid_t > 0)

    # pmPrintValue
    print "pmPrintValue: "
    ctx.pmPrintValue(sys.__stdout__, results, descs[0], 0, 0, 8)
    print

    # pmReconnectContext
    code = ctx.pmReconnectContext()
    print "pmReconnectContext", code
    self.assertTrue(code >= 0)

    # pmFreeResult
    ctx.pmFreeResult(results)
    print "pmFreeResult"

    del ctx

class TestSequenceFunctions(unittest.TestCase):

    ncpu_id = []
    metric_ids = []
    archive_type = False
    local_type = False

    def test_context(self):
        test_pcp(self)


if __name__ == '__main__':

    if (len(sys.argv) == 2):
        open(sys.argv[1] + '.index', mode='r')
        ARCHIVE = sys.argv[1]
    elif (len(sys.argv) > 2):
        print "Usage: " + sys.argv[0] + " OptionalArchivePath"
        sys.exit()
    else:
        ARCHIVE = ""
        
    sys.argv[1:] = ()

    STS = unittest.main()
    sys.exit(STS)
